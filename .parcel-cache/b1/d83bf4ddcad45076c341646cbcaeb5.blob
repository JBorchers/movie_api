'use strict';
module.exports = exports;
const url = require('url');
const fs = require('fs');
const path = require('path');
module.exports.detect = function(opts, config) {
    const to = opts.hosted_path;
    const uri = url.parse(to);
    config.prefix = !uri.pathname || uri.pathname === '/' ? '' : uri.pathname.replace('/', '');
    if (opts.bucket && opts.region) {
        config.bucket = opts.bucket;
        config.region = opts.region;
        config.endpoint = opts.host;
        config.s3ForcePathStyle = opts.s3ForcePathStyle;
    } else {
        const parts = uri.hostname.split('.s3');
        const bucket = parts[0];
        if (!bucket) return;
        if (!config.bucket) config.bucket = bucket;
        if (!config.region) {
            const region = parts[1].slice(1).split('.')[0];
            if (region === 'amazonaws') config.region = 'us-east-1';
            else config.region = region;
        }
    }
};
module.exports.get_s3 = function(config) {
    var params4, callback4, params1, callback1, params2, callback2, params3, callback3;
    // if not mocking then setup real s3.
    const AWS = require('aws-sdk');
    AWS.config.update(config);
    const s3 = new AWS.S3();
    // need to change if additional options need to be specified.
    return {
        listObjects (params, callback) {
            return s3.listObjects(params, callback);
        },
        headObject (params, callback) {
            return s3.headObject(params, callback);
        },
        deleteObject (params, callback) {
            return s3.deleteObject(params, callback);
        },
        putObject (params, callback) {
            return s3.putObject(params, callback);
        }
    };
};
//
// function to get the mocking control function. if not mocking it returns a no-op.
//
// if mocking it sets up the mock http interceptors that use the mocked s3 file system
// to fulfill reponses.
module.exports.get_mockS3Http = function() {
    let mock_s3 = false;
    return ()=>mock_s3
    ;
};
